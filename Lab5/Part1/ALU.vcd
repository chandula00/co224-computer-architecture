$date
	Mon May 08 21:39:39 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbed $end
$var wire 8 ! RESULT_test [7:0] $end
$var reg 8 " DATA1_test [7:0] $end
$var reg 8 # DATA2_test [7:0] $end
$var reg 3 $ SELECT_test [2:0] $end
$scope module alu_t $end
$var wire 8 % DATA1 [7:0] $end
$var wire 8 & DATA2 [7:0] $end
$var wire 3 ' SELECT [2:0] $end
$var wire 8 ( OUTPUT_or [7:0] $end
$var wire 8 ) OUTPUT_forward [7:0] $end
$var wire 8 * OUTPUT_and [7:0] $end
$var wire 8 + OUTPUT_add [7:0] $end
$var reg 8 , RESULT [7:0] $end
$scope module add_ $end
$var wire 8 - DATA1 [7:0] $end
$var wire 8 . DATA2 [7:0] $end
$var wire 8 / RESULT [7:0] $end
$upscope $end
$scope module and_ $end
$var wire 8 0 DATA1 [7:0] $end
$var wire 8 1 DATA2 [7:0] $end
$var wire 8 2 RESULT [7:0] $end
$upscope $end
$scope module forward_ $end
$var wire 8 3 DATA2 [7:0] $end
$var wire 8 4 RESULT [7:0] $end
$upscope $end
$scope module or_ $end
$var wire 8 5 DATA1 [7:0] $end
$var wire 8 6 DATA2 [7:0] $end
$var wire 8 7 RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 7
b10 6
b1 5
bx 4
b10 3
bx 2
b10 1
b1 0
bx /
b10 .
b1 -
bx ,
bx +
bx *
bx )
bx (
b0 '
b10 &
b1 %
b0 $
b10 #
b1 "
bx !
$end
#1
b10 !
b10 ,
b11 (
b11 7
b0 *
b0 2
b10 )
b10 4
#2
b11 +
b11 /
#6
b11 !
b11 ,
b1 $
b1 '
b100 #
b100 &
b100 .
b100 1
b100 3
b100 6
b11 "
b11 %
b11 -
b11 0
b11 5
#7
b111 (
b111 7
b100 )
b100 4
#8
b111 !
b111 ,
b111 +
b111 /
#13
b0 !
b0 ,
b10 $
b10 '
b101 #
b101 &
b101 .
b101 1
b101 3
b101 6
b100 "
b100 %
b100 -
b100 0
b100 5
#14
b100 !
b100 ,
b100 *
b100 2
b101 (
b101 7
b101 )
b101 4
#15
b1001 +
b1001 /
#19
b101 !
b101 ,
b11 $
b11 '
b111 #
b111 &
b111 .
b111 1
b111 3
b111 6
b110 "
b110 %
b110 -
b110 0
b110 5
#20
b111 !
b111 ,
b110 *
b110 2
b111 (
b111 7
b111 )
b111 4
#21
b1101 +
b1101 /
#25
